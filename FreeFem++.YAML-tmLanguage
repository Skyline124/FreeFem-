#[PackageDev] ext: tmLanguage
---
name: FreeFem++
scopeName: source.FreeFem++
fileTypes: [edp]
uuid: 88f5b3d3-5019-47b9-924b-e114f151f9c8

patterns:
- comment: type
  name: storage.type.c
  match: \b(asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void|border|Cmatrix|complex|fespace|func|ifstream|matrix|mesh|mesh3|ofstream|problem|R3|real|solve|string|varf)\b

- comment: functions
  name: keyword.control.c
  match: \b(break|case|continue|default|do|else|for|goto|if|_Pragma|return|switch|while|average|jump|mean|otherside|int1d|int2d|intalledges|on|dn|dx|dxx|dxy|dy|dyx|dyy|dz|interpolate|set|sort|change|plot|adaptmesh|buildmesh|buildmeshborder|checkmovemesh|emptymesh|movemesh|readmesh|savemesh|splitmesh|square|triangulate|trunc|abs|acos|acosh|arg|asin|asinh|atan|atan2|atanh|ceil|conj|cos|cosh|exp|floor|imag|log|log10|max|min|norm|polar|pow|sin|sinh|sqrt|tan|tanh|randinit|randint31|randint32|randreal1|randreal2|randreal3|randint32|randint31|randreal1|randreadl2|randreal3|randres53|randinit|rint|ciel|j0|j1|jn|y0|y1|yn|tgamma|erf|erfc)\b

- comment: keyword
  name: entity.name.function.preprocessor.c
  match: \b(P0|P0edge|P0VF|P1|P1b|P1dc|P1nc|P2|P2b|P2dc|P2h|RT0|RT0Ortho|RTmodif|qf1pE|qf1pElump|qf1pT|qf1pTlump|qf2pE|qf2pT|qf2pT4P1|qf3pE|qf5pT|qf7pT|qf9pT)\b

- comment: parameter
  name: entity.name.function.preprocessor.c
  match: \b(abserror|anisomax|append|aspectratio|bb|binside|bmat|bw|cadna|clean|cmm|cutoff|dimKrylov|eps|err|errg|factorize|fill|grey|hmax|hmin|hsv|init|inquire|inside|IsMetric|iso|ivalue|keepbackvertices|maxit|maxsubdiv|metric|nbarrow|nev|nbiso|nbiter|nbiterline|nbjacoby|nbsmooth|nbvx|ncv|nomeshgeneration|omega|op|optimize|periodic|power|precon|prev|ps|qfe|qfnbpE|qfnbpT|qforder|qft|ratio|rescaling|save|sigma|solver|split|splitin2|splitpbedge|strategy|sym|tgv|thetamax|tol|tolpivot|tolpivotsym|value|varrow|vector|veps|viso|wait|WindowIndex)\b

- comment: comment block
  name: comment.block.c
  begin: /\*      
  end: \*/

- comment: reserved constants
  name: constant.language.c
  match: \b(NULL|true|false|TRUE|FALSE)\b

- comment: strings with double quotes
  begin: \"
  beginCaptures:
    '0': {name: punctuation.definition.string.begin.c}
  end: \"
  endCaptures:
    '0': {name: punctuation.definition.string.end.c}
  name: string.quoted.double.c

- begin: ^\s*#\s*(define|defined|elif|else|if|ifdef|ifndef|line|pragma|undef)\b
  captures:
    '1': {name: keyword.control.import.c}
  end: (?=(?://|/\*))|$
  name: meta.preprocessor.c

- comment: numeric constants
  name: constant.numeric.c
  match: \b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\b

- comment: operators
  name: keyword.operator.symbols.matlab
  match: \s*(==|~=|<|<=|>|>=|&|&&|:|\||\|\||\+|-|\*|\.\*|(?=/)|\./|\\|\.\\|\^|\.\^)\s*

- comment: comment line
  name: comment.line.banner.c++
  begin: //      
  end: $\n?

...